Implementarea in Prolog a cautarii de tip best-first

Predicatul bestfirst(Nod_initial, solutie) este adevarat daca solutie este drum (obtinur folosind strategia best-first) de la nodul Nod_initial la o stare_scop.

bestfirst(Nod_initial, solutie) :-
  expandeaza([],l(Nod_initial, 0/0), 9999999, _, da, solutie) .
  expandeaza(Drum, l(N,_), _, _, da, [N|Drum]) :- scop(N) .

Caz 1: daca N este nod_scop, atunci construim cale_solutie
-----------------------------------------------------------

expandeaza(Drum,l(N,F/G), Limita, Arb1, Rez, Sol) :-
  F =< Limita,
  (bagof (M/C, (s(N, M, C), \+(membru(M, Drum))), Succ), !, listasucc(G,Succ, As), cea_mai_buna_f(As, F1), expandeaza(Drum, t(N, F1/G,As) Limita, Arb1, Rez, Sol); Rez=imposibil) .


Caz 2: daca N este nod_frunza a carui f-valoare este mai mica decat Limita, atunci ii generez succesori si ii expandez in limita Limita.
----------------------------------------------------------------------------------------------------------------------------------------

expandeaza(Drum, t(N,F/G,[A/As])Limita, Arb1, Rez, Sol) :-
  F=< Limita, cea_mai_buna_f(As, BF), min(Limita, Bf, Limita1), expandeaza([N|Drum], A, Limita1, A1, Rez1, Sol), continua(Drum, t(N,F/G, [A1/As]), Limita, Arb1, Rez1, Rez, Sol) .


Caz 3: Daca arborele de radacina N are subarbori nevizi si f^ - valoarea este mai mica decat Limita, atunci expandam cel mai "promitator" subarbore sau, in functie de rezultatul obtinut, Rez, vom decide cum vom continua cautarea cu ajutorul predicatului continua:
------
  expandeaza(_, t(_, _, []), _, _, imposibil, _) :- ! .

Caz 4: nu se obtin solutii
------

expandeaza(_, Arb, Limita, Arb, nu, _) :- f(Arb, F), F > Limita .

Caz 5: In cazul unot f^ -valori ami mari dcatt Bound, Arborele nu mai poate fi extins

continua(_, _, _, _, da, da, Sol) .
continua(P, t(F/G, [A1|As]), Limita, Arb1, nu, Rez, Sol) :-
insereaza(A1, As, NAs), cea_mai_buna_f(NAs, F1), expandeaza(P, t(N, F1/F, NAs), Limita, Arb1, Rez, Sol) .
continua(P, t(N, F/G,[_|As]), Limita, Arb1, imposibil, Rez, Sol) :- cea_mai_buna_f(As, F1),
expandeaza(P, t(N,F1/G, As), Limita, Arb1, Rez, Sol) .
listasucc(_, [], []) .
listasucc(GO, [N/C[Ncs],Ts]) :-
G is Go+c,
h(N, H),
F is G+H,
listasucc(G0, Ncs, Ts1) .
inserea(l, (N, F/G), Ts1, Ts) .
