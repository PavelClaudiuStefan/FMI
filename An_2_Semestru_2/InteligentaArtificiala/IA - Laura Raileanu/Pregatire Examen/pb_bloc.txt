<<<<<<< HEAD
/*Rentea Andreea Mihaela,242

Definim relatia de succesiune */

%s(+Lista stive,-Lista rez)
s(Lista_stive,Lista_stive_rez):-
	membru(X,Lista_stive),                                 % se ia o lista din lista de stive
	X=[Varf|_],                                            %se ia primul element X din stiva aleasa mai sus
	det_poz_el(Lista_stive,N,X),                           %se dtermina pozitia elementului X in lista de stive
	sterg_la_n(Lista_stive,Lista_stive_inter,N),           %sterge  capul stivei de pe pozitia N 
	membru(Y,Lista_stive),                                 %ia urm Y din lista de stive
	det_poz_el(Lista_stive,N1,Y),N1\==N,                   %determina si pentru Y pozitia in lista de stive, si daca sunt poz N sunt dif
	adaug_la_n(Varf,Lista_stive_inter,Lista_stive_rez,N1), %il aduga pe X in Y
	\+(permutare(Lista_stive,Lista_stive_rez)).            %verifica daca a mai fost aceasta configuratie
	
%Predicatul  sterg_la_n este folosit pentru stergerea capului stivei de pe pozitia N din lista de stive Lista_stive
	
sterg_la_n([[_|T]|TT],[T|TT],1).
sterg_la_n([H|T],[H|L],N):-
	N>1,N1 is N-1, sterg_la_n(T,L,N1).
	
%Predicatul adaug_la_n este folosit pentru adaugarea elementului X in capului stivei din lista de stive Lista_stive, de pe pozitia N

adaug_la_n(H,[T|TT],[[H|T]|TT],1).
adaug_la_n(H,[HH|T],[HH|T1],N):-
	N>1,N1 is N-1,adaug_la_n(H,T,T1,N1).
	
%Prin intermediul predicatelor inital si scop definim starile initiale si starile finale

initial([[d],[a,b],[c]]).

scop([[],[a,b,c,d],[]]).

%Cautare de tip breadth-first

rezolva_b(NodInitial, Solutie):-breadthfirst([[NodInitial]],Solutie).

breadthfirst([[Nod|Drum]|_], [Nod|Drum]):- scop(Nod).
breadthfirst([Drum|Drumuri], Solutie) :- 
				extinde(Drum, DrumNoi), 
				concat(Drumuri, DrumNoi, Drumuri1),
				breadthfirst(Drumuri1, Solutie).

%extinde(+StareDrum,-ListaDrumuriDerivate)
extinde([Nod|Drum],DrumNoi):-
				bagof([NodNou,Nod|Drum], (s(Nod,NodNou), \+(membru(NodNou,[Nod|Drum]))),
				DrumNoi),
				!.
extinde(_,[]).
	
%Cautare de tip depth-first cu mecanism de detectare a ciclurilor

rezolva(Nod,Solutie):-depthfirst([],Nod,Solutie).

depthfirst(Drum, Nod, [Nod|Drum]):-scop(Nod).%-> se verifica daca e scop
depthfirst(Drum, Nod, Solution):- %-> daca nu e scop acea configuratie se apeleaza succesor pt a crea urm configuratie
			s(Nod,Nod1),
			\+ (membru(Nod1,Drum)), 
			depthfirst([Nod|Drum],Nod1, Solution).

			
%rezolva poblema prin breadth-first
pb_bf:-tell('C:\\Users\\Andreea\\Desktop\\pb_bloc_rez_bf.txt'),initial(S),rezolva_b(S,Solutie),afisare(Solutie),told.

%rezolva problema prin depth-first
pb_df:-tell('C:\\Users\\Andreea\\Desktop\\pb_bloc_rez_df.txt'),initial(S),%<-se initializeaza configuratia initiala
      rezolva(S,Solutie),% se apeleaza depthfirst
	  afisare(Solutie),told.

%Predicatul Lung(L,N) este adevarat daca N este lungimea listei L

lung([],0).
lung([_|T],N):-lung(T,N1),N is N1+1.

max(A,B,B):-B>=A,!.
max(A,_,A).

%Predicatul max_lung este utilizat pentru determinarea celei mai mari lungimi a unei stive din lista de stive L

%max_lung(+L,-N)
max_lung([],0).
max_lung([H|T],N):-
			max_lung(T,N1),
			lung(H,N2),
			max(N1,N2,N).

%Predicatul arata(Situatie) este utilizat pentru afisearea configuratiei Situatie

arata(L):-nl,max_lung(L,N),
          afis(L,N,N).

%Determinam mai intai cea mai mare lungime a unei stive din L si afisam nivel cu nivel, 
%incepand de la ultimul,blocurile din stivele aflate in lista L

afis(L1,_,0):-af(L1).
%afis(+L1,+N,+K)
afis(L1,N,K):-K>0,
			  afis2(L1,N,K),
			  nl,
			  K1 is K-1,
			  afis(L1,N,K1).
			  
af([]):-write('==').
af([_|T]):-write('==='),
		   af(T).

afis2([],_,_).%se ia fiecare bloc din lista [H|T] si se calculeaza lungimea blocului
afis2([H|T],N,K):-lung(H,L),
				  (L>=K,L1 is L-K+1,det_el_n(H,L1,R),write(R);
				  L<K,write('\t')),
				  write('\t\t'),
				  afis2(T,N,K).
				  
%det_el_n(+H,+L,-R)
det_el_n([H|_],1,H).    
det_el_n([_|T],K,H):-K>1,
					 K1 is K-1,
					 det_el_n(T,K1,H).
					 
det_poz_el([H|_],1,H).   %cond de oprire
det_poz_el([_|T],K,H):-det_poz_el(T,K1,H), 
						K is K1+1.
						
sterg(X,[X|L],L).
sterg(X,[Y|L],[Y|L1]):-sterg(X,L,L1).

permutare([],[]).
permutare([H|T],L):-permutare(T,T1),%permutare Lista stive si Lista rez
					sterg(H,L,T1).
					
membru(X,[X|_]).
membru(X,[_|Y]):-membru(X,Y).

concat([],L,L).
concat([H|T],L,[H|T1]):-concat(T,L,T1).

afisare([]).
afisare([H|T]):-afisare(T),
				arata(H),
=======
/*Rentea Andreea Mihaela,242

Definim relatia de succesiune */

%s(+Lista stive,-Lista rez)
s(Lista_stive,Lista_stive_rez):-
	membru(X,Lista_stive),                                 % se ia o lista din lista de stive
	X=[Varf|_],                                            %se ia primul element X din stiva aleasa mai sus
	det_poz_el(Lista_stive,N,X),                           %se dtermina pozitia elementului X in lista de stive
	sterg_la_n(Lista_stive,Lista_stive_inter,N),           %sterge  capul stivei de pe pozitia N 
	membru(Y,Lista_stive),                                 %ia urm Y din lista de stive
	det_poz_el(Lista_stive,N1,Y),N1\==N,                   %determina si pentru Y pozitia in lista de stive, si daca sunt poz N sunt dif
	adaug_la_n(Varf,Lista_stive_inter,Lista_stive_rez,N1), %il aduga pe X in Y
	\+(permutare(Lista_stive,Lista_stive_rez)).            %verifica daca a mai fost aceasta configuratie
	
%Predicatul  sterg_la_n este folosit pentru stergerea capului stivei de pe pozitia N din lista de stive Lista_stive
	
sterg_la_n([[_|T]|TT],[T|TT],1).
sterg_la_n([H|T],[H|L],N):-
	N>1,N1 is N-1, sterg_la_n(T,L,N1).
	
%Predicatul adaug_la_n este folosit pentru adaugarea elementului X in capului stivei din lista de stive Lista_stive, de pe pozitia N

adaug_la_n(H,[T|TT],[[H|T]|TT],1).
adaug_la_n(H,[HH|T],[HH|T1],N):-
	N>1,N1 is N-1,adaug_la_n(H,T,T1,N1).
	
%Prin intermediul predicatelor inital si scop definim starile initiale si starile finale

initial([[d],[a,b],[c]]).

scop([[],[a,b,c,d],[]]).

%Cautare de tip breadth-first

rezolva_b(NodInitial, Solutie):-breadthfirst([[NodInitial]],Solutie).

breadthfirst([[Nod|Drum]|_], [Nod|Drum]):- scop(Nod).
breadthfirst([Drum|Drumuri], Solutie) :- 
				extinde(Drum, DrumNoi), 
				concat(Drumuri, DrumNoi, Drumuri1),
				breadthfirst(Drumuri1, Solutie).

%extinde(+StareDrum,-ListaDrumuriDerivate)
extinde([Nod|Drum],DrumNoi):-
				bagof([NodNou,Nod|Drum], (s(Nod,NodNou), \+(membru(NodNou,[Nod|Drum]))),
				DrumNoi),
				!.
extinde(_,[]).
	
%Cautare de tip depth-first cu mecanism de detectare a ciclurilor

rezolva(Nod,Solutie):-depthfirst([],Nod,Solutie).

depthfirst(Drum, Nod, [Nod|Drum]):-scop(Nod).%-> se verifica daca e scop
depthfirst(Drum, Nod, Solution):- %-> daca nu e scop acea configuratie se apeleaza succesor pt a crea urm configuratie
			s(Nod,Nod1),
			\+ (membru(Nod1,Drum)), 
			depthfirst([Nod|Drum],Nod1, Solution).

			
%rezolva poblema prin breadth-first
pb_bf:-tell('C:\\Users\\Andreea\\Desktop\\pb_bloc_rez_bf.txt'),initial(S),rezolva_b(S,Solutie),afisare(Solutie),told.

%rezolva problema prin depth-first
pb_df:-tell('C:\\Users\\Andreea\\Desktop\\pb_bloc_rez_df.txt'),initial(S),%<-se initializeaza configuratia initiala
      rezolva(S,Solutie),% se apeleaza depthfirst
	  afisare(Solutie),told.

%Predicatul Lung(L,N) este adevarat daca N este lungimea listei L

lung([],0).
lung([_|T],N):-lung(T,N1),N is N1+1.

max(A,B,B):-B>=A,!.
max(A,_,A).

%Predicatul max_lung este utilizat pentru determinarea celei mai mari lungimi a unei stive din lista de stive L

%max_lung(+L,-N)
max_lung([],0).
max_lung([H|T],N):-
			max_lung(T,N1),
			lung(H,N2),
			max(N1,N2,N).

%Predicatul arata(Situatie) este utilizat pentru afisearea configuratiei Situatie

arata(L):-nl,max_lung(L,N),
          afis(L,N,N).

%Determinam mai intai cea mai mare lungime a unei stive din L si afisam nivel cu nivel, 
%incepand de la ultimul,blocurile din stivele aflate in lista L

afis(L1,_,0):-af(L1).
%afis(+L1,+N,+K)
afis(L1,N,K):-K>0,
			  afis2(L1,N,K),
			  nl,
			  K1 is K-1,
			  afis(L1,N,K1).
			  
af([]):-write('==').
af([_|T]):-write('==='),
		   af(T).

afis2([],_,_).%se ia fiecare bloc din lista [H|T] si se calculeaza lungimea blocului
afis2([H|T],N,K):-lung(H,L),
				  (L>=K,L1 is L-K+1,det_el_n(H,L1,R),write(R);
				  L<K,write('\t')),
				  write('\t\t'),
				  afis2(T,N,K).
				  
%det_el_n(+H,+L,-R)
det_el_n([H|_],1,H).    
det_el_n([_|T],K,H):-K>1,
					 K1 is K-1,
					 det_el_n(T,K1,H).
					 
det_poz_el([H|_],1,H).   %cond de oprire
det_poz_el([_|T],K,H):-det_poz_el(T,K1,H), 
						K is K1+1.
						
sterg(X,[X|L],L).
sterg(X,[Y|L],[Y|L1]):-sterg(X,L,L1).

permutare([],[]).
permutare([H|T],L):-permutare(T,T1),%permutare Lista stive si Lista rez
					sterg(H,L,T1).
					
membru(X,[X|_]).
membru(X,[_|Y]):-membru(X,Y).

concat([],L,L).
concat([H|T],L,[H|T1]):-concat(T,L,T1).

afisare([]).
afisare([H|T]):-afisare(T),
				arata(H),
>>>>>>> feab55879a043046db6c4196b3b8a68a2d0acde2
				nl.